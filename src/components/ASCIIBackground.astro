<!--
  ASCIIBackground.astro
  
  Performance-optimized ASCII art background component.
  Reduces memory usage and CPU load through smart animation management.
-->

<div class="ascii-background">
  <div class="ascii-art" id="ascii-canvas"></div>
</div>

<script>
  import { ASCIIGenerator, ASCIIAnimator } from '../utils/ASCIIGenerator.js';
  import { ThemeController } from '../utils/ThemeController.js';

  // Store global references for cleanup
  let currentAnimator: any = null;
  let currentThemeController: any = null;
  let resizeTimeout: ReturnType<typeof setTimeout>;
  let isPageVisible = true;

  // Visibility API for performance optimization
  function handleVisibilityChange() {
    isPageVisible = !document.hidden;
    
    if (currentAnimator) {
      if (isPageVisible) {
        // Resume animation when page becomes visible
        if (!currentAnimator.isAnimating) {
          currentAnimator.start();
        }
      } else {
        // Pause animation when page is hidden to save resources
        currentAnimator.stop();
      }
    }
  }

  function initializeComponents() {
    // Clean up existing instances
    if (currentAnimator) {
      currentAnimator.stop?.();
    }

    // Initialize ASCII art
    const asciiCanvas = document.getElementById('ascii-canvas');
    if (!asciiCanvas) {
      console.warn('ASCII canvas element not found');
      return;
    }
    
    const generator = new ASCIIGenerator();
    
    // Check if we're on the landing page
    const isLandingPage = window.location.pathname === '/' || window.location.pathname === '/index.html';
    
    // Reduced performance settings
    const animatorOptions = {
      progressiveReveal: isLandingPage,
      revealDuration: 1500, // Faster reveal
      staticMode: !isLandingPage,
      fpsTransitionDuration: 1500, // Faster transitions
      staticCharacterChangeInterval: 4000, // Less frequent changes
      staticCharacterChangeCount: 2 // Fewer character changes
    };
    
    // Add CSS class for progressive reveal styling
    if (isLandingPage) {
      asciiCanvas.classList.add('progressive-reveal');
      
      setTimeout(() => {
        asciiCanvas.classList.add('reveal-complete');
        setTimeout(() => {
          asciiCanvas.classList.remove('progressive-reveal');
        }, 800);
      }, 2000);
    } else {
      asciiCanvas.classList.remove('progressive-reveal', 'reveal-complete');
    }
    
    // Lower FPS for better performance
    currentAnimator = new ASCIIAnimator(asciiCanvas, generator, 'circuit', 6, animatorOptions);
    currentAnimator.start();
    
    // Enable static mode for non-landing pages
    if (!isLandingPage) {
      setTimeout(() => {
        if (currentAnimator) {
          currentAnimator.enableStaticMode();
        }
      }, 200);
    }
    
    // Optimized resize handling
    const handleResize = () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(() => {
        if (currentAnimator && isPageVisible) {
          currentAnimator.resize();
        }
      }, 300); // Increased debounce time
    };
    
    window.addEventListener('resize', handleResize, { passive: true });
    
    // Only add mobile-specific listeners if needed
    if (window.innerWidth <= 768) {
      if (window.visualViewport) {
        window.visualViewport.addEventListener('resize', handleResize, { passive: true });
      }
      
      window.addEventListener('orientationchange', () => {
        setTimeout(() => {
          if (currentAnimator && isPageVisible) {
            currentAnimator.resize();
          }
        }, 600);
      }, { passive: true });
    }

    // Initialize theme controller only if not already initialized
    if (!currentThemeController) {
      currentThemeController = new ThemeController();
    } else {
      currentThemeController.applyTheme();
    }
  }

  // Optimized page transition handling
  function handlePageTransition() {
    if (currentAnimator && currentAnimator.staticMode && isPageVisible) {
      currentAnimator.triggerPageTransition();
    }
  }

  // Initialize visibility change listener
  document.addEventListener('visibilitychange', handleVisibilityChange, { passive: true });

  // Initialize on first load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeComponents);
  } else {
    initializeComponents();
  }

  // Re-initialize after Astro view transitions
  document.addEventListener('astro:after-swap', () => {
    // Small delay to ensure DOM is ready
    setTimeout(() => {
      initializeComponents();
      setTimeout(handlePageTransition, 100);
    }, 50);
  });

  // Handle page transitions
  document.addEventListener('astro:before-swap', handlePageTransition);
</script>