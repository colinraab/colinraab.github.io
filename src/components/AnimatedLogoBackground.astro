<!--
  AnimatedLogoBackground.astro
  
  Animated SVG logo background component with dynamic visual effects.
  Features SVG animations and responsive scaling.
  Provides visual branding element with subtle motion.
-->

<div id="animated-logo-background" class="logo-background">
  <svg id="logo-svg" viewBox="0 0 1000 1001.525" class="logo-svg">
    <defs>
      <!-- Turbulence filters removed -->
    </defs>
    <circle class="logo-circle" cx="344.447" cy="188.217" r="107.602" data-delay="0"/>
    <circle class="logo-circle" cx="344.447" cy="586.661" r="107.602" data-delay="100"/>
    <circle class="logo-circle" cx="187.503" cy="389.681" r="107.602" data-delay="200"/>
    <circle class="logo-circle" cx="646.913" cy="188.217" r="107.602" data-delay="300"/>
    <circle class="logo-circle" cx="802.43" cy="389.319" r="107.602" data-delay="400"/>
    <circle class="logo-circle" cx="646.913" cy="586.661" r="107.602" data-delay="500"/>
    <circle class="logo-circle" cx="825.523" cy="844.398" r="107.602" data-delay="600"/>
  </svg>
</div>

<style lang="scss">
  .logo-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    pointer-events: none;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.1;
    
    .logo-svg {
      width: 80vw;
      height: 80vh;
      max-width: 800px;
      max-height: 800px;
      
      .logo-circle {
        fill: none;
        stroke: #000000; 
        stroke-width: 0; 
        stroke-miterlimit: 10;
        opacity: 0;
        transform-box: fill-box;
        transform-origin: center center;
      }
    }
    
    @media (max-width: 768px) {
      .logo-svg {
        width: 95vw;
        height: 95vh;
      }
    }
  }
</style>

<script>
  import { ThemeController } from '../utils/ThemeController.js';

  declare const anime: any;

  // Initialize theme controller
  const themeController = new ThemeController();
  let currentAnimations: any[] = [];
  let animationInitialized = false;
  
  // Function to stop all current animations
  function stopCurrentAnimations() {
    currentAnimations.forEach(animation => {
      if (animation && animation.pause) {
        animation.pause();
      }
    });
    currentAnimations = [];
  }
  
  // Animation function
  function animateLogo() {
    if (animationInitialized) {
      return;
    }
    
    animationInitialized = true;
    
    stopCurrentAnimations();
    
    const circles = document.querySelectorAll('.logo-circle');
    
    if (!circles.length || typeof anime === 'undefined') {
      console.warn('Anime.js not loaded or circles not found');
      return;
    }
    
    // Reset circles to initial state
    circles.forEach(circle => {
      const htmlElement = circle as HTMLElement;
      htmlElement.style.opacity = '0';
      htmlElement.style.strokeWidth = '0';
    });
    
    // Animate circles in sequence
    circles.forEach((circle, index) => {
      const delayAttr = circle.getAttribute('data-delay');
      const delay = delayAttr ? parseInt(delayAttr) : 0;
      
      // Stroke width and fade in animation: 0 -> 25 -> 15
      const strokeAnimation = anime({
        targets: circle,
        strokeWidth: [0, 25, 15],
        opacity: [0, 1, 1],
        duration: 1200,
        delay: delay,
        easing: 'easeOutQuart'
      });
      currentAnimations.push(strokeAnimation);
    });
  }
  
  // Update stroke colors based on theme
  function updateLogoTheme(theme: string) {
    const circles = document.querySelectorAll('.logo-circle');
    const strokeColor = theme === 'dark' ? '#ffffff' : '#000000';
    
    circles.forEach(circle => {
      const htmlElement = circle as HTMLElement;
      htmlElement.style.stroke = strokeColor;
      // Also update the CSS custom property for immediate effect
      htmlElement.setAttribute('stroke', strokeColor);
    });
  }
  
  // Initialize on page load
  document.addEventListener('DOMContentLoaded', () => {
    // Update theme initially
    updateLogoTheme(themeController.getCurrentTheme());
    
    // Listen for theme changes
    themeController.onThemeChange((theme: string) => {
      updateLogoTheme(theme);
    });
    
    // Also listen for manual theme changes via data-theme attribute
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
          const newTheme = document.documentElement.getAttribute('data-theme') || 'dark';
          updateLogoTheme(newTheme);
        }
      });
    });
    
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme']
    });
    
    // Start initial animation after a short delay
    if (!animationInitialized) {
      setTimeout(animateLogo, 200);
    }
  });
  
  // Re-initialize on view transitions
  document.addEventListener('astro:page-load', () => {
    // Reset animation state for new page
    animationInitialized = false;
    stopCurrentAnimations();
    
    // Update theme and start animation
    const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
    updateLogoTheme(currentTheme);
    setTimeout(animateLogo, 200);
  });
</script>